" Built in
set nocompatible " Don't try to be vi compatible
filetype plugin on " Vim wiki
map <Space> <Leader>

" =============================================================================
" Plug
" =============================================================================
call plug#begin('~/.vim/plugged')

Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-surround'

" Fuzzy search
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Syntactic language support
Plug 'rust-lang/rust.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'iCyMind/NeoSolarized'

Plug 'vimwiki/vimwiki'
call plug#end()


" FZF
set rtp+=/usr/local/opt/fzf
map <C-p> :FZF<CR>

" Rust
let g:rustfmt_autosave = 1



" Keep undo history through file open and close
set undofile
set undodir=~/.vim/undodir


" =============================================================================
" Editor Settings
" =============================================================================
syntax on " Turn on syntax highlighting

" Colorscheme
set termguicolors
set background=dark
colorscheme NeoSolarized

set cursorline " Highlight current line

" Show whitespace
"set list
"set listchars=tab:›\ ,trail:⋅

set clipboard=unnamed " Set default clipboard to system

" Whitespace
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab " Spaces not tabs
set noshiftround
set ai " Auto indent
set si " Smart indent

set showmatch " Show matching brackets when text indicator is over them

" Last line
set showmode
set showcmd

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Lightline setup
set noshowmode " Hide --INSERT-- at the bottom since lightline shows it.
let g:lightline = { 'colorscheme': 'wombat' }

" If search string all lower case, does case insensitive, else case sensitive
set ignorecase
set smartcase
set incsearch
set hlsearch

set colorcolumn=80

" coc autocomplete
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" VimWiki
let g:vimwiki_list = [{'path': '~/notes/work', 'syntax': 'markdown', 'ext': '.md'}]

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

nnoremap <F5> !sh clang *.c -o Output
